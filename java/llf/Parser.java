/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;

/**
   The parser class.  Most parsing mechanics will be generated by
   javacc 0.7.1.

   This parser uses the official grammar spec as a basis for all
   constructions.  However, MAJOR modifications occured, generally
   for these reasons.  

   First, JavaCC is a LL(k) parser, not LALR like yacc/bison.  
   Hence, left recursion must be removed.  Note that left associative
   operators introduce left recursion, because the rules essentially
   tranform into:  M ::= [ M ] <operator> <something other than M>.

   Second, precedence is introduced by creating non-terminals for every
   predecedence level.  So, for example, in the grammar, the non-terminal
   M (Base Object) can be an Additive Pair, or a lamda function.  One
   non-terminal is created for each possibility.
*/

public class Parser implements ParserConstants {

  static final String crlf = System.getProperty("line.separator");

  public static String[] space;

  public static Parser create(java.io.InputStream is) {
    return new Parser(is);
  }

  public static Parser create(String s) {
    char[] ca = s.toCharArray();
    byte[] ba = new byte[ca.length];

    for (int i=0; i<ca.length; ++i) {
      ba[i] = (byte) ca[i];
    }

    ByteArrayInputStream bais = new ByteArrayInputStream(ba);

    return new Parser (bais);
  }

  public static void initSpaces(int max) {
    char[] spacesSlavetoCharArray();

    space = new String[max];

    for (int i=0; i<max; ++i) {
      space[i] = new String(spacesSlave, 0, i);
    }
  }

  static {
    Parser.initSpaces(2048);
  }

//
// The actual Grammar follows:
//
  static final public BaseObject root() throws ParseException {
  BaseObject bo;
    bo = baseObject();
    jj_consume_token(0);
          {if (true) return bo;}
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject baseObject() throws ParseException {
  BaseObject bo;
    bo = commaBaseObject();
          {if (true) return bo;}
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject commaBaseObject() throws ParseException {
  Token c = null;

  Variable v = null;
  Type t = null;
  BaseObject bo = null;

  BaseObject lbo = null;
  BaseObject rbo = null;
    lbo = lambdaBaseObject();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      rbo = commaBaseObject();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
          if (null == rbo) {
            {if (true) return lbo;}
          } else {
            {if (true) return new Pair(lbo, rbo);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject lambdaBaseObject() throws ParseException {
  BaseObject bo = null;

  Variable v = null;

  Type t = null;

  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      v = variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAT:
        token = jj_consume_token(HAT);
        break;
      case COLON:
        token = jj_consume_token(COLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = type();
      jj_consume_token(RBRACKET);
      bo = lambdaBaseObject();
          if ("^".equals(token.image)) {
            {if (true) return new LinearLambda(v, t, bo);}
          } else {
            {if (true) return new Lambda(v, t, bo);}
          }
      break;
    case UNIT:
    case LPAREN:
    case FIRST:
    case SECOND:
    case IDENTIFIER:
      bo = functionBaseObject();
          {if (true) return bo;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject functionBaseObject() throws ParseException {
  BaseObject lbo = null;
  BaseObject rbo = null;

  java.util.Vector v;

  BaseObject retval;
    v = functionBaseObjectVector();
          if (0 == v.size()) {
            {if (true) throw new ParseException("Assertion failed.  Size of v should be a positive, odd number.");}
          }

          retval = (BaseObject) v.elementAt(0);

          for (int i=1; i<v.size(); i += 2) {
            String s =          (String) v.elementAt(i);
            BaseObject bo =     (BaseObject) v.elementAt(i+1);

            if (" ".equals(s)) {
              retval = new App(retval, bo);
            } else {
              // s must equal "^".
              retval = new LinearApp(retval, bo);
            }
          }
          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  static final public java.util.Vector functionBaseObjectVector() throws ParseException {
  BaseObject lbo = null;
  BaseObject rbo = null;

  java.util.Vector retval = null;

  Token token = null;
    lbo = highestBaseObject();
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAT:
        token = jj_consume_token(HAT);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      retval = functionBaseObjectVector();
    } else {
      ;
    }
          if (null == retval) {
            retval = new java.util.Vector();
            retval.addElement(lbo);
          } else {
            retval.insertElementAt(lbo, 0);
            retval.insertElementAt((null==token) ? " " : token.image, 1);
          }

          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject highestBaseObject() throws ParseException {
  Token c;
  BaseObject bo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIRST:
      jj_consume_token(FIRST);
      bo = highestBaseObject();
          {if (true) return new First(bo);}
      break;
    case SECOND:
      jj_consume_token(SECOND);
      bo = highestBaseObject();
          {if (true) return new Second(bo);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      bo = baseObject();
      jj_consume_token(RPAREN);
          {if (true) return bo;}
      break;
    case IDENTIFIER:
      c = jj_consume_token(IDENTIFIER);
          {if (true) return new Identifier(c.image);}
      break;
    case UNIT:
      jj_consume_token(UNIT);
          {if (true) return new Unit();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeFamily typeFamily() throws ParseException {
  Token c;

  BaseObject bo = null;

  java.util.Vector v = new java.util.Vector();
    c = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIT:
    case LPAREN:
    case LBRACKET:
    case FIRST:
    case SECOND:
    case IDENTIFIER:
      v = typeFamilyVector();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
          TypeFamily retval;

          retval = new TypeFamilyConstant(c.image);

          for (int i=0; i<v.size(); i++) {
            retval = new TypeFamilyInstantiation(retval,
                                                 (BaseObject) v.elementAt(i));
          }
          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  static final public java.util.Vector typeFamilyVector() throws ParseException {
  BaseObject bo = null;
  java.util.Vector retval = null;
    bo = baseObject2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIT:
    case LPAREN:
    case LBRACKET:
    case FIRST:
    case SECOND:
    case IDENTIFIER:
      retval = typeFamilyVector();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          if (null == retval) {
            retval = new java.util.Vector();
            retval.addElement(bo);
            {if (true) return retval;}
          } else {
            retval.insertElementAt(bo, 0);
            {if (true) return retval;}
          }
    throw new Error("Missing return statement in function");
  }

  static final public Type type() throws ParseException {
  Type t;
    t = functionType();
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type functionType() throws ParseException {
  Type lt;
  Type rt;

  Variable v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      v = variable();
      jj_consume_token(COLON);
      lt = functionType();
      jj_consume_token(RBRACE);
      rt = functionType();
          {if (true) return new FunctionType(v, lt, rt);}
      break;
    case TOP:
    case LPAREN:
    case IDENTIFIER:
      lt = leftFunctionType();
          {if (true) return lt;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type leftFunctionType() throws ParseException {
  java.util.Vector v;

  Type retval;
    v = leftFunctionTypeVector();
          if (0 == v.size()) {
            {if (true) throw new ParseException("Assertion failed.  Size of v should be a positive, odd number.");}
          }

          retval = (Type) v.elementAt(v.size()-1);

          for (int i=v.size()-2; i>=0; i-=2) {
            String s =          (String) v.elementAt(i);
            Type t  =           (Type) v.elementAt(i-1);

            // Notice that retval is recursing down the left.  That is
            // the essence of how o- is being reversed into a -o.

            // Associativity, on the other hand, is being reversed from
            // left to right by the reverse direction of this for loop.

            if ("o-".equals(s)) {
              retval = new Lollipop(retval, t);
            } else {
              // s must equal "<-".
              retval = new FunctionType(null, retval, t);
            }
          }
          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  static final public java.util.Vector leftFunctionTypeVector() throws ParseException {
  Type lt = null;
  Type rt = null;

  java.util.Vector retval = null;

  Token t = null;
    lt = rightFunctionType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLOLLIPOP:
    case LARROW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLOLLIPOP:
        t = jj_consume_token(LLOLLIPOP);
        break;
      case LARROW:
        t = jj_consume_token(LARROW);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      retval = leftFunctionTypeVector();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
          if (null == retval) {
            retval = new java.util.Vector();
            retval.addElement(lt);
          } else {
            retval.insertElementAt(lt, 0);
            retval.insertElementAt(t.image, 1);
          }

          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  static final public Type rightFunctionType() throws ParseException {
  Type lt = null;
  Type rt = null;

  Token t = null;
    lt = withType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RLOLLIPOP:
    case RARROW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RLOLLIPOP:
        t = jj_consume_token(RLOLLIPOP);
        break;
      case RARROW:
        t = jj_consume_token(RARROW);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rt = rightFunctionType();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
          if (null == rt) {
            {if (true) return lt;}
          } else if ("-o".equals(t.image)) {
            {if (true) return new Lollipop(lt, rt);}
          } else if ("->".equals(t.image)) {
            {if (true) return new FunctionType(null, lt, rt);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public Type withType() throws ParseException {
  Type lt = null;
  Type rt = null;
    lt = highestType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      rt = withType();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
          if (null == rt) {
            {if (true) return lt;}
          } else {
            {if (true) return new With(lt, rt);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public Type highestType() throws ParseException {
  TypeFamily tf;
  Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      tf = typeFamily();
          {if (true) return tf;}
      break;
    case TOP:
      jj_consume_token(TOP);
          {if (true) return new Top();}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      t = type();
      jj_consume_token(RPAREN);
          {if (true) return t;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variable variable() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return new Variable(t.image);}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////////////////////
  static final public BaseObject baseObject2() throws ParseException {
  BaseObject bo;
    bo = commaBaseObject2();
          {if (true) return bo;}
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject commaBaseObject2() throws ParseException {
  Token c = null;

  Variable v = null;
  Type t = null;
  BaseObject bo = null;

  BaseObject lbo = null;
  BaseObject rbo = null;
    lbo = lambdaBaseObject2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      rbo = commaBaseObject2();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
          if (null == rbo) {
            {if (true) return lbo;}
          } else {
            {if (true) return new Pair(lbo, rbo);}
          }
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject lambdaBaseObject2() throws ParseException {
  BaseObject bo = null;

  Variable v = null;

  Type t = null;

  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      v = variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAT:
        token = jj_consume_token(HAT);
        break;
      case COLON:
        token = jj_consume_token(COLON);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = type();
      jj_consume_token(RBRACKET);
      bo = lambdaBaseObject2();
          if ("^".equals(token.image)) {
            {if (true) return new LinearLambda(v, t, bo);}
          } else {
            {if (true) return new Lambda(v, t, bo);}
          }
      break;
    case UNIT:
    case LPAREN:
    case FIRST:
    case SECOND:
    case IDENTIFIER:
      bo = highestBaseObject2();
          {if (true) return bo;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public BaseObject highestBaseObject2() throws ParseException {
  Token c;
  BaseObject bo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIRST:
      jj_consume_token(FIRST);
      bo = highestBaseObject2();
          {if (true) return new First(bo);}
      break;
    case SECOND:
      jj_consume_token(SECOND);
      bo = highestBaseObject2();
          {if (true) return new Second(bo);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      bo = baseObject();
      jj_consume_token(RPAREN);
          {if (true) return bo;}
      break;
    case IDENTIFIER:
      c = jj_consume_token(IDENTIFIER);
          {if (true) return new Identifier(c.image);}
      break;
    case UNIT:
      jj_consume_token(UNIT);
          {if (true) return new Unit();}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_2()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(UNIT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_6() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_9()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_1() {
    if (jj_scan_token(HAT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_5() {
    if (jj_scan_token(SECOND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_3()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_4() {
    if (jj_scan_token(FIRST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_3()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_2()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_2() {
    if (jj_3R_3()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ParserTokenManager token_source;
  static ASCII_UCodeESC_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static final private int[] jj_la1_0 = {0x80000,0x140000,0xe11040,0x100000,0xe01040,0xe11040,0xe11040,0x805020,0xa00,0xa00,0x500,0x500,0x80,0x801020,0x80000,0x140000,0xe11040,0xe01040,};
  static final private JJParserCalls[] jj_2_rtns = new JJParserCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJParserCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJParserCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[27];
    for (int i = 0; i < 27; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJParserCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJParserCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJParserCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

}

final class JJParserCalls {
  int gen;
  Token first;
  int arg;
  JJParserCalls next;
}
