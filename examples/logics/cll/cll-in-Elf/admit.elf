%%% Admissibility of Cut for LV
%%% Author: Frank Pfenning

ad  : {A:o} (pos A -> #) -> (neg A -> #) -> # -> type.
ad! : {A:o} (pos A -> #) -> (neg! A -> #) -> # -> type.
ad? : {A:o} (pos? A -> #) -> (neg A -> #) -> # -> type.

%mode -ad! +A1 +D1! +E1  -F1
%mode -ad? +A2 +D2  +E2! -F2
%mode -ad  +A3 +D3  +E3  -F3

%lex {A1 A2 A3} {} {D1! D2 D3} {E1 E2! E3}

%% 1. Axiom Cases

ad_axiom_l : ad A ([p] axiom N p) E (E N).

ad_axiom_r : ad A D ([n] axiom n P) (D P).

%% 2. Essential Cases

% Essential cases, multiplicatives

ad_times : ad (A1 times A2) ([p] timesr D1 D2 p) ([n] timesl E1 n) F
	    <- ({n2:neg A2} ad A1 D1 ([n1] E1 n1 n2) (E1' n2))
	    <- ad A2 D2 E1' F.

ad_one   : ad (one) ([p] oner p) ([n] onel E1 n) E1.

% Essential cases, additives

ad_and1 : ad (A1 and A2) ([p] andr D1 D2 p) ([n] andl1 E1 n) F
	   <- ad A1 D1 E1 F.

ad_and2 : ad (A1 and A2) ([p] andr D1 D2 p) ([n] andl2 E2 n) F
	   <- ad A2 D2 E2 F.

% No essential case for additive unit

% Essentional case, involution

ad_perp : ad (perp A1) ([p] perpr D1 p) ([n] perpl E1 n) F
	   <- ad A1 E1 D1 F.

% Essential case, quantifier

ad_forall : ad (forall A1) ([p] forallr D1 p) ([n] foralll T E1 n) F
	     <- ad (A1 T) (D1 T) E1 F.

% Essential cases, exponentials

ad_! : ad (! A1) ([p] !r D1! p) ([n] !l E1 n) F
	<- ad! A1 D1! E1 F.

ad_? : ad (? A1) ([p] ?r D1 p) ([n] ?l E1! n) F
	<- ad? A1 D1 E1! F.

%% 3. Structural Cases

ad!_d  : ad! A D! ([n!] !d (E1 n!) n!) F
	  <- ({n1:neg A} ad! A D! ([n!] E1 n! n1) (E1' n1))
	  <- ad A D! E1' F.

ad?_r  : ad? A ([p?] ?d (D1 p?) p?) E! F
	  <- ({p1:pos A} ad? A ([p?] D1 p? p1) E! (D1' p1))
	  <- ad A D1' E! F.

%% 4. Commutative Cases

% 4.1 Right commutative cases of Cut

% No commutative cases crossing axioms

% Crossing multiplicatives

adr_timesr1 : ad A D ([n] timesr (E1 n) E2 P) (timesr E1' E2 P)
	       <- ({p1:pos B1} ad A D ([n] E1 n p1) (E1' p1)).

adr_timesr2 : ad A D ([n] timesr E1 (E2 n) P) (timesr E1 E2' P)
	       <- ({p2:pos B2} ad A D ([n] E2 n p2) (E2' p2)).

adr_timesl  : ad A D ([n] timesl (E1 n) N) (timesl E1' N)
	       <- ({n1:neg B1} {n2:neg B2}
		     ad A D ([n] E1 n n1 n2) (E1' n1 n2)).

% No case for oner

adr_onel    : ad A D ([n] onel (E1 n) N) (onel E1' N)
	       <- ad A D E1 E1'.

% Crossing additives

adr_andr : ad A D ([n] andr (E1 n) (E2 n) P) (andr E1' E2' P)
	    <- ({p1:pos B1} ad A D ([n] E1 n p1) (E1' p1))
	    <- ({p2:pos B2} ad A D ([n] E2 n p2) (E2' p2)).

adr_andl1 : ad A D ([n] andl1 (E1 n) N) (andl1 E1' N)
	     <- ({n1:neg B1} ad A D ([n] E1 n n1) (E1' n1)).

adr_andl2 : ad A D ([n] andl2 (E2 n) N) (andl2 E2' N)
	     <- ({n2:neg B2} ad A D ([n] E2 n n2) (E2' n2)).

adr_topr  : ad A D ([n] topr P) (topr P).

% no topl rule

% Crossing involution

adr_perpr : ad A D ([n] perpr (E1 n) P) (perpr E1' P)
	     <- ({n1:neg B1} ad A D ([n] E1 n n1) (E1' n1)).

adr_perpl : ad A D ([n] perpl (E1 n) N) (perpl E1' N)
	     <- ({p1:pos B1} ad A D ([n] E1 n p1) (E1' p1)).

% Crossing quantifier

adr_forallr : ad A D ([n] forallr (E1 n) P) (forallr E1' P)
	       <- ({a:i} {p1:pos (B1 a)} ad A D ([n] E1 n a p1) (E1' a p1)).

adr_foralll : ad A D ([n] foralll T (E1 n) N) (foralll T E1' N)
	       <- ({n1} ad A D ([n] E1 n n1) (E1' n1)).

% Crossing exponentials

% no adr_!r since there are no linear side formulas

% Meta-level weakening is required in next case
adr_!l : ad A D ([n] !l (E1 n) N) (!l E1' N)
	  <- ({n1!:neg! B1} ad A D ([n] E1 n n1!) (E1' n1!)).

adr_!d : ad A D ([n] !d (E1 n) N!) (!d E1' N!)
	  <- ({n1:neg B} ad A D ([n] E1 n n1) (E1' n1)).

% Meta-level weakening is required in next case
adr_?r : ad A D ([n] ?r (E1 n) P) (?r E1' P)
	  <- ({p1?:pos? B1} ad A D ([n] E1 n p1?) (E1' p1?)).

% no adr_?l since there are no linear side formulas

adr_?d : ad A D ([n] ?d (E1 n) P?) (?d E1' P?)
	  <- ({p1:pos B} ad A D ([n] E1 n p1) (E1' p1)).

% 4.2 Left commutative cases of Cut

% No commutative cases crossing axioms

% Crossing multiplicatives

adl_timesr1 : ad A ([p] timesr (D1 p) D2 P) E (timesr D1' D2 P)
	       <- ({p1:pos B1} ad A ([p] D1 p p1) E (D1' p1)).

adl_timesr2 : ad A ([p] timesr D1 (D2 p) P) E (timesr D1 D2' P)
	       <- ({p2:pos B2} ad A ([p] D2 p p2) E (D2' p2)).

adl_timesl  : ad A ([p] timesl (D1 p) N) E (timesl D1' N)
	       <- ({n1:neg B1} {n2:neg B2}
		     ad A ([p] D1 p n1 n2) E (D1' n1 n2)).

% No case for oner

adl_onel    : ad A ([p] onel (D1 p) N) E (onel D1' N)
	       <- ad A D1 E D1'.

% Crossing additives

adl_andr  : ad A ([p] andr (D1 p) (D2 p) P) E (andr D1' D2' P)
	     <- ({p1:pos B1} ad A ([p] D1 p p1) E (D1' p1))
	     <- ({p2:pos B2} ad A ([p] D2 p p2) E (D2' p2)).

adl_andl1 : ad A ([p] andl1 (D1 p) N) E (andl1 D1' N)
	     <- ({n1:neg B1} ad A ([p] D1 p n1) E (D1' n1)).

adl_andl2 : ad A ([p] andl2 (D2 p) N) E (andl2 D2' N)
	     <- ({n2:neg B1} ad A ([p] D2 p n2) E (D2' n2)).

adl_topr  : ad A ([p] topr P) E (topr P).

% no topl rule

% Crossing involution

adl_perpr : ad A ([p] perpr (D1 p) P) E (perpr D1' P)
	     <- ({n1:neg B1} ad A ([p] D1 p n1) E (D1' n1)).

adl_perpl : ad A ([p] perpl (D1 p) N) E (perpl D1' N)
	     <- ({p1:pos B1} ad A ([p] D1 p p1) E (D1' p1)).

% Crossing quantifier

adl_forallr : ad A ([p] forallr (D1 p) P) E (forallr D1' P)
	       <- ({a:i} {p1:pos (B1 a)} ad A ([p] D1 p a p1) E (D1' a p1)).

adl_foralll : ad A ([p] foralll T (D1 p) N) E (foralll T D1' N)
	       <- ({n1} ad A ([p] D1 p n1) E (D1' n1)).

% Crossing exponentials

% no adl_!r since there are no linear side formulas

adl_!l : ad A ([p] !l (D1 p) N) E (!l D1' N)
	  <- ({n1!:neg! B1} ad A ([p] D1 p n1!) E (D1' n1!)).

adl_!d : ad A ([p] !d (D1 p) N!) E (!d D1' N!)
	  <- ({n1:neg B} ad A ([p] D1 p n1) E (D1' n1)).

adl_?r : ad A ([p] ?r (D1 p) P) E (?r D1' P)
	  <- ({p1?:pos? B1} ad A ([p] D1 p p1?) E (D1' p1?)).

% no adl_?l since there are no linear side formulas

adl_?d : ad A ([p] ?d (D1 p) P?) E (?d D1' P?)
	  <- ({p1:pos B} ad A ([p] D1 p p1) E (D1' p1)).

% 4.3 Right commutative cases of Cut!

% Crossing axioms

ad!r_axiom : ad! A D! ([n!] axiom N P) (axiom N P).

% Crossing multiplicatives

ad!r_timesr : ad! A D! ([n!] timesr (E1 n!) (E2 n!) P)
	       (timesr E1' E2' P)
	       <- ({p1:pos B1} ad! A D! ([n!] E1 n! p1) (E1' p1))
	       <- ({p2:pos B2} ad! A D! ([n!] E2 n! p2) (E2' p2)).

ad!r_timesl : ad! A D! ([n!] timesl (E1 n!) N) (timesl E1' N)
	       <- ({n1:neg B1} {n2:neg B2}
		     ad! A D! ([n!] E1 n! n1 n2) (E1' n1 n2)).

ad!r_oner   : ad! A D! ([n!] oner P) (oner P).

ad!r_onel   : ad! A D! ([n!] onel (E1 n!) N) (onel E1' N)
	       <- ad! A D! E1 E1'.

% Crossing additives

ad!r_andr   : ad! A D! ([n!] andr (E1 n!) (E2 n!) P) (andr E1' E2' P)
	       <- ({p1:pos B1} ad! A D! ([n!] E1 n! p1) (E1' p1))
	       <- ({p2:pos B2} ad! A D! ([n!] E2 n! p2) (E2' p2)).

ad!r_andl1  : ad! A D! ([n!] andl1 (E1 n!) N) (andl1 E1' N)
	       <- ({n1:neg B1} ad! A D! ([n!] E1 n! n1) (E1' n1)).

ad!r_andl2  : ad! A D! ([n!] andl2 (E2 n!) N) (andl1 E2' N)
	       <- ({n2:neg B2} ad! A D! ([n!] E2 n! n2) (E2' n2)).

ad!r_topr   : ad! A D! ([n!] topr P) (topr P).

% no topl rule

% Crossing involutions

ad!r_perpr  : ad! A D! ([n!] perpr (E1 n!) P) (perpr E1' P)
	       <- ({n1:neg B1} ad! A D! ([n!] E1 n! n1) (E1' n1)).

ad!r_perpl  : ad! A D! ([n!] perpl (E1 n!) N) (perpl E1' N)
	       <- ({p1:pos B1} ad! A D! ([n!] E1 n! p1) (E1' p1)).

% Crossing quantifiers

ad!r_forallr : ad! A D! ([n!] forallr (E1 n!) P) (forallr E1' P)
		<- ({a:i} {p1:pos (B1 a)}
		      ad! A D! ([n!] E1 n! a p1) (E1' a p1)).

ad!r_foralll : ad! A D! ([n!] foralll T (E1 n!) N) (foralll T E1' N)
		<- ({n1} ad! A D! ([n!] E1 n! n1) (E1' n1)).

% Crossing exponentials

ad!r_!r : ad! A D! ([n!] !r (E1! n!) P) (!r E1!' P)
	   <- ({p1:pos B1} ad! A D! ([n!] E1! n! p1) (E1!' p1)).

ad!r_!l : ad! A D! ([n!] !l (E1 n!) N) (!l E1' N)
	   <- ({n1!:neg! B1} ad! A D! ([n!] E1 n! n1!) (E1' n1!)).

ad!r_!d : ad! A D! ([n!] !d (E1 n!) N!) (!d E1' N!)
	   <- ({n1:neg B} ad! A D! ([n!] E1 n! n1) (E1' n1)).

ad!r_?r : ad! A D! ([n!] ?r (E1 n!) P) (?r E1' P)
	   <- ({p1?:pos? B1} ad! A D! ([n!] E1 n! p1?) (E1' p1?)).

ad!r_?l : ad! A D! ([n!] ?l (E1! n!) N) (?l E1!' N)
	   <- ({n1:neg B1} ad! A D! ([n!] E1! n! n1) (E1!' n1)).

ad!r_?d : ad! A D! ([n!] ?d (E1 n!) P?) (?d E1' P?)
	   <- ({p1:pos B} ad! A D! ([n!] E1 n! p1) (E1' p1)).

% 4.4 No left commutative cases for Cut!
% Right commutative or structural
% cases will always be applicable for ad!

% 4.5 No right commutative cases for Cut?
% Left commutative cases or structural
% cases will always be applicable for ad?

% 4.6 Left commutative cases for Cut?

% Crossing axioms

ad?l_axiom : ad? A ([p?] axiom N P) E! (axiom N P).

% Crossing multiplicatives

ad?l_timesr : ad? A ([p?] timesr (D1 p?) (D2 p?) P) E! (timesr D1' D2' P)
	       <- ({p1:pos B1} ad? A ([p?] D1 p? p1) E! (D1' p1))
	       <- ({p2:pos B2} ad? A ([p?] D2 p? p2) E! (D2' p2)).

ad?l_timesl : ad? A ([p?] timesl (D1 p?) N) E! (timesl D1' N)
	       <- ({n1:neg B1} {n2:neg B2}
		     ad? A ([p?] D1 p? n1 n2) E! (D1' n1 n2)).

ad?l_oner   : ad? A ([p?] oner P) E! (oner P).

ad?l_onel   : ad? A ([p?] onel (D1 p?) N) E! (onel D1' N)
	       <- ad? A D1 E! D1'.

% Crossing additives

ad?l_andr  : ad? A ([p?] andr (D1 p?) (D2 p?) P) E! (andr D1' D2' P)
	      <- ({p1:pos B1} ad? A ([p?] D1 p? p1) E! (D1' p1))
	      <- ({p2:pos B2} ad? A ([p?] D2 p? p2) E! (D2' p2)).

ad?l_andl1 : ad? A ([p?] andl1 (D1 p?) N) E! (andl1 D1' N)
	      <- ({n1:neg B1} ad? A ([p?] D1 p? n1) E! (D1' n1)).

ad?l_andl2 : ad? A ([p?] andl2 (D2 p?) N) E! (andl2 D2' N)
	      <- ({n2:neg B2} ad? A ([p?] D2 p? n2) E! (D2' n2)).

ad?l_topr  : ad? A ([p?] topr P) E! (topr P).

% no topl rule

% Crossing involutions

ad?l_perpr : ad? A ([p?] perpr (D1 p?) P) E! (perpr D1' P)
	      <- ({n1:neg B1} ad? A ([p?] D1 p? n1) E! (D1' n1)).

ad?l_perpl : ad? A ([p?] perpl (D1 p?) N) E! (perpl D1' N)
	      <- ({p1:pos B1} ad? A ([p?] D1 p? p1) E! (D1' p1)).

% Crossing quantifiers

ad?l_forallr : ad? A ([p?] forallr (D1 p?) P) E! (forallr D1' P)
		<- ({a:i} {p1:pos (B1 a)}
		      ad? A ([p?] D1 p? a p1) E! (D1' a p1)).

ad?l_foralll : ad? A ([p?] foralll T (D1 p?) N) E! (foralll T D1' N)
		<- ({n1} ad? A ([p?] D1 p? n1) E! (D1' n1)).

% Crossing exponentials

ad?l_!r : ad? A ([p?] !r (D1! p?) P) E! (!r  D1!' P)
	   <- ({p1:pos B1} ad? A ([p?] D1! p? p1) E! (D1!' p1)).

ad?l_!l : ad? A ([p?] !l (D1 p?) N) E! (!l D1' N)
	   <- ({n1!:neg! B1} ad? A ([p?] D1 p? n1!) E! (D1' n1!)).

ad?l_!d : ad? A ([p?] !d (D1 p?) N!) E! (!d D1' N!)
	   <- ({n1:neg B} ad? A ([p?] D1 p? n1) E! (D1' n1)).

ad?l_?r : ad? A ([p?] ?r (D1 p?) P) E! (?r D1' P)
	   <- ({p1?:pos? B1} ad? A ([p?] D1 p? p1?) E! (D1' p1?)).

ad?l_?l : ad? A ([p?] ?l (D1! p?) N) E! (?l D1!' N)
	   <- ({n1:neg B1} ad? A ([p?] D1! p? n1) E! (D1!' n1)).

ad?l_?d : ad? A ([p?] ?d (D1 p?) P?) E! (?d D1' P?)
	   <- ({p1:pos B} ad? A ([p?] D1 p? p1) E! (D1' p1)).

